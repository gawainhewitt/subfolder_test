import { createCancelAndHoldAutomationEvent as createCancelAndHoldAutomationEventFunction, createCancelScheduledValuesAutomationEvent as createCancelScheduledValuesAutomationEventFunction, createExponentialRampToValueAutomationEvent as createExponentialRampToValueAutomationEventFunction, createLinearRampToValueAutomationEvent as createLinearRampToValueAutomationEventFunction, createSetTargetAutomationEvent as createSetTargetAutomationEventFunction, createSetValueAutomationEvent as createSetValueAutomationEventFunction, createSetValueCurveAutomationEvent as createSetValueCurveAutomationEventFunction } from 'automation-events';
import { TAddAudioParamConnectionsFunction } from 'standardized-audio-context/src/types/add-audio-param-connections-function';
import { TAudioParamAudioNodeStore } from 'standardized-audio-context/src/types/audio-param-audio-node-store';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TAudioParamRendererFactory } from 'standardized-audio-context/src/types/audio-param-renderer-factory';
import { TAudioParamStore } from 'standardized-audio-context/src/types/audio-param-store';
import { TNativeAudioContextConstructor } from 'standardized-audio-context/src/types/native-audio-context-constructor';
import { TSetValueAtTimeUntilPossibleFunction } from 'standardized-audio-context/src/types/set-value-at-time-until-possible-function';
export type TAudioParamFactoryFactory = (addAudioParamConnections: TAddAudioParamConnectionsFunction, audioParamAudioNodeStore: TAudioParamAudioNodeStore, audioParamStore: TAudioParamStore, createAudioParamRenderer: TAudioParamRendererFactory, createCancelAndHoldAutomationEvent: typeof createCancelAndHoldAutomationEventFunction, createCancelScheduledValuesAutomationEvent: typeof createCancelScheduledValuesAutomationEventFunction, createExponentialRampToValueAutomationEvent: typeof createExponentialRampToValueAutomationEventFunction, createLinearRampToValueAutomationEvent: typeof createLinearRampToValueAutomationEventFunction, createSetTargetAutomationEvent: typeof createSetTargetAutomationEventFunction, createSetValueAutomationEvent: typeof createSetValueAutomationEventFunction, createSetValueCurveAutomationEvent: typeof createSetValueCurveAutomationEventFunction, nativeAudioContextConstructor: null | TNativeAudioContextConstructor, setValueAtTimeUntilPossible: TSetValueAtTimeUntilPossibleFunction) => TAudioParamFactory;
//# sourceMappingURL=audio-param-factory-factory.d.ts.map