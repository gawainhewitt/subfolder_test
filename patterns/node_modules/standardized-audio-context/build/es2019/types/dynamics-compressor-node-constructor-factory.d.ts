import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TDynamicsCompressorNodeConstructor } from 'standardized-audio-context/src/types/dynamics-compressor-node-constructor';
import { TDynamicsCompressorNodeRendererFactory } from 'standardized-audio-context/src/types/dynamics-compressor-node-renderer-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeDynamicsCompressorNodeFactory } from 'standardized-audio-context/src/types/native-dynamics-compressor-node-factory';
import { TNotSupportedErrorFactory } from 'standardized-audio-context/src/types/not-supported-error-factory';
import { TSetAudioNodeTailTimeFunction } from 'standardized-audio-context/src/types/set-audio-node-tail-time-function';
export type TDynamicsCompressorNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createDynamicsCompressorNodeRenderer: TDynamicsCompressorNodeRendererFactory, createNativeDynamicsCompressorNode: TNativeDynamicsCompressorNodeFactory, createNotSupportedError: TNotSupportedErrorFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, setAudioNodeTailTime: TSetAudioNodeTailTimeFunction) => TDynamicsCompressorNodeConstructor;
//# sourceMappingURL=dynamics-compressor-node-constructor-factory.d.ts.map