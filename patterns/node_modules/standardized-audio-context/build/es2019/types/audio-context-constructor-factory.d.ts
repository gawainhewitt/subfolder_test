import { TAudioContextConstructor } from 'standardized-audio-context/src/types/audio-context-constructor';
import { TBaseAudioContextConstructor } from 'standardized-audio-context/src/types/base-audio-context-constructor';
import { TInvalidStateErrorFactory } from 'standardized-audio-context/src/types/invalid-state-error-factory';
import { TMediaElementAudioSourceNodeConstructor } from 'standardized-audio-context/src/types/media-element-audio-source-node-constructor';
import { TMediaStreamAudioDestinationNodeConstructor } from 'standardized-audio-context/src/types/media-stream-audio-destination-node-constructor';
import { TMediaStreamAudioSourceNodeConstructor } from 'standardized-audio-context/src/types/media-stream-audio-source-node-constructor';
import { TMediaStreamTrackAudioSourceNodeConstructor } from 'standardized-audio-context/src/types/media-stream-track-audio-source-node-constructor';
import { TNativeAudioContextConstructor } from 'standardized-audio-context/src/types/native-audio-context-constructor';
import { TNotSupportedErrorFactory } from 'standardized-audio-context/src/types/not-supported-error-factory';
import { TUnknownErrorFactory } from 'standardized-audio-context/src/types/unknown-error-factory';
export type TAudioContextConstructorFactory = (baseAudioContextConstructor: TBaseAudioContextConstructor, createInvalidStateError: TInvalidStateErrorFactory, createNotSupportedError: TNotSupportedErrorFactory, createUnknownError: TUnknownErrorFactory, mediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor: TMediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor: TMediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor: null | TNativeAudioContextConstructor) => TAudioContextConstructor;
//# sourceMappingURL=audio-context-constructor-factory.d.ts.map