import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TInvalidStateErrorFactory } from 'standardized-audio-context/src/types/invalid-state-error-factory';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeWaveShaperNodeFactory } from 'standardized-audio-context/src/types/native-wave-shaper-node-factory';
import { TSetAudioNodeTailTimeFunction } from 'standardized-audio-context/src/types/set-audio-node-tail-time-function';
import { TWaveShaperNodeConstructor } from 'standardized-audio-context/src/types/wave-shaper-node-constructor';
import { TWaveShaperNodeRendererFactory } from 'standardized-audio-context/src/types/wave-shaper-node-renderer-factory';
export type TWaveShaperNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createInvalidStateError: TInvalidStateErrorFactory, createNativeWaveShaperNode: TNativeWaveShaperNodeFactory, createWaveShaperNodeRenderer: TWaveShaperNodeRendererFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, setAudioNodeTailTime: TSetAudioNodeTailTimeFunction) => TWaveShaperNodeConstructor;
//# sourceMappingURL=wave-shaper-node-constructor-factory.d.ts.map