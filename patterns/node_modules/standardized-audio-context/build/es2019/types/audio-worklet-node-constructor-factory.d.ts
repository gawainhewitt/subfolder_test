import { TAddUnrenderedAudioWorkletNodeFunction } from 'standardized-audio-context/src/types/add-unrendered-audio-worklet-node-function';
import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TAudioWorkletNodeConstructor } from 'standardized-audio-context/src/types/audio-worklet-node-constructor';
import { TAudioWorkletNodeRendererFactory } from 'standardized-audio-context/src/types/audio-worklet-node-renderer-factory';
import { TGetAudioNodeConnectionsFunction } from 'standardized-audio-context/src/types/get-audio-node-connections-function';
import { TGetBackupOfflineAudioContextFunction } from 'standardized-audio-context/src/types/get-backup-offline-audio-context-function';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeAudioWorkletNodeConstructor } from 'standardized-audio-context/src/types/native-audio-worklet-node-constructor';
import { TNativeAudioWorkletNodeFactory } from 'standardized-audio-context/src/types/native-audio-worklet-node-factory';
import { TSanitizeAudioWorkletNodeOptionsFunction } from 'standardized-audio-context/src/types/sanitize-audio-worklet-node-options-function';
import { TSetActiveAudioWorkletNodeInputsFunction } from 'standardized-audio-context/src/types/set-active-audio-worklet-node-inputs-function';
import { TTestAudioWorkletNodeOptionsClonabilityFunction } from 'standardized-audio-context/src/types/test-audio-worklet-node-options-clonability-function';
import { TWrapEventListenerFunction } from 'standardized-audio-context/src/types/wrap-event-listener-function';
export type TAudioWorkletNodeConstructorFactory = (addUnrenderedAudioWorkletNode: TAddUnrenderedAudioWorkletNodeFunction, audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createAudioWorkletNodeRenderer: TAudioWorkletNodeRendererFactory, createNativeAudioWorkletNode: TNativeAudioWorkletNodeFactory, getAudioNodeConnections: TGetAudioNodeConnectionsFunction, getBackupOfflineAudioContext: TGetBackupOfflineAudioContextFunction, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, nativeAudioWorkletNodeConstructor: null | TNativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions: TSanitizeAudioWorkletNodeOptionsFunction, setActiveAudioWorkletNodeInputs: TSetActiveAudioWorkletNodeInputsFunction, testAudioWorkletNodeOptionsClonability: TTestAudioWorkletNodeOptionsClonabilityFunction, wrapEventListener: TWrapEventListenerFunction) => TAudioWorkletNodeConstructor;
//# sourceMappingURL=audio-worklet-node-constructor-factory.d.ts.map