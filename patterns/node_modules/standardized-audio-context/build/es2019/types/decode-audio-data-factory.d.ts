import { TAudioBufferStore } from 'standardized-audio-context/src/types/audio-buffer-store';
import { TCacheTestResultFunction } from 'standardized-audio-context/src/types/cache-test-result-function';
import { TDataCloneErrorFactory } from 'standardized-audio-context/src/types/data-clone-error-factory';
import { TDecodeAudioDataFunction } from 'standardized-audio-context/src/types/decode-audio-data-function';
import { TEncodingErrorFactory } from 'standardized-audio-context/src/types/encoding-error-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeContextFunction } from 'standardized-audio-context/src/types/is-native-context-function';
import { TNativeAudioBuffer } from 'standardized-audio-context/src/types/native-audio-buffer';
import { TNativeContext } from 'standardized-audio-context/src/types/native-context';
import { TWrapAudioBufferCopyChannelMethodsFunction } from 'standardized-audio-context/src/types/wrap-audio-buffer-copy-channel-methods-function';
import { TWrapAudioBufferCopyChannelMethodsOutOfBoundsFunction } from 'standardized-audio-context/src/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function';
export type TDecodeAudioDataFactory = (audioBufferStore: TAudioBufferStore, cacheTestResult: TCacheTestResultFunction, createDataCloneError: TDataCloneErrorFactory, createEncodingError: TEncodingErrorFactory, detachedArrayBuffers: WeakSet<ArrayBuffer>, getNativeContext: TGetNativeContextFunction, isNativeContext: TIsNativeContextFunction, testAudioBufferCopyChannelMethodsOutOfBoundsSupport: (nativeAudioBuffer: TNativeAudioBuffer) => boolean, testPromiseSupport: (nativeContext: TNativeContext) => boolean, wrapAudioBufferCopyChannelMethods: TWrapAudioBufferCopyChannelMethodsFunction, wrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFunction) => TDecodeAudioDataFunction;
//# sourceMappingURL=decode-audio-data-factory.d.ts.map