import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TChannelSplitterNodeConstructor } from 'standardized-audio-context/src/types/channel-splitter-node-constructor';
import { TChannelSplitterNodeRendererFactory } from 'standardized-audio-context/src/types/channel-splitter-node-renderer-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeChannelSplitterNodeFactory } from 'standardized-audio-context/src/types/native-channel-splitter-node-factory';
import { TSanitizeChannelSplitterOptionsFunction } from 'standardized-audio-context/src/types/sanitize-channel-splitter-options-function';
export type TChannelSplitterNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createChannelSplitterNodeRenderer: TChannelSplitterNodeRendererFactory, createNativeChannelSplitterNode: TNativeChannelSplitterNodeFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, sanitizeChannelSplitterOptions: TSanitizeChannelSplitterOptionsFunction) => TChannelSplitterNodeConstructor;
//# sourceMappingURL=channel-splitter-node-constructor-factory.d.ts.map