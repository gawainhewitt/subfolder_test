import { TConnectedNativeAudioBufferSourceNodeFactory } from 'standardized-audio-context/src/types/connected-native-audio-buffer-source-node-factory';
import { TInvalidStateErrorFactory } from 'standardized-audio-context/src/types/invalid-state-error-factory';
import { TIsDCCurveFunction } from 'standardized-audio-context/src/types/is-dc-curve-function';
import { TMonitorConnectionsFunction } from 'standardized-audio-context/src/types/monitor-connections-function';
import { TNativeAudioContextConstructor } from 'standardized-audio-context/src/types/native-audio-context-constructor';
import { TNativeWaveShaperNodeFactory } from 'standardized-audio-context/src/types/native-wave-shaper-node-factory';
import { TNativeWaveShaperNodeFakerFactory } from 'standardized-audio-context/src/types/native-wave-shaper-node-faker-factory';
import { TOverwriteAccessorsFunction } from 'standardized-audio-context/src/types/overwrite-accessors-function';
export type TNativeWaveShaperNodeFactoryFactory = (createConnectedNativeAudioBufferSourceNode: TConnectedNativeAudioBufferSourceNodeFactory, createInvalidStateError: TInvalidStateErrorFactory, createNativeWaveShaperNodeFaker: TNativeWaveShaperNodeFakerFactory, isDCCurve: TIsDCCurveFunction, monitorConnections: TMonitorConnectionsFunction, nativeAudioContextConstructor: null | TNativeAudioContextConstructor, overwriteAccessors: TOverwriteAccessorsFunction) => TNativeWaveShaperNodeFactory;
//# sourceMappingURL=native-wave-shaper-node-factory-factory.d.ts.map