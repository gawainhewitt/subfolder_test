import { TAudioBufferSourceNodeConstructor } from 'standardized-audio-context/src/types/audio-buffer-source-node-constructor';
import { TAudioBufferSourceNodeRendererFactory } from 'standardized-audio-context/src/types/audio-buffer-source-node-renderer-factory';
import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TInvalidStateErrorFactory } from 'standardized-audio-context/src/types/invalid-state-error-factory';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeAudioBufferSourceNodeFactory } from 'standardized-audio-context/src/types/native-audio-buffer-source-node-factory';
import { TWrapEventListenerFunction } from 'standardized-audio-context/src/types/wrap-event-listener-function';
export type TAudioBufferSourceNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioBufferSourceNodeRenderer: TAudioBufferSourceNodeRendererFactory, createAudioParam: TAudioParamFactory, createInvalidStateError: TInvalidStateErrorFactory, createNativeAudioBufferSourceNode: TNativeAudioBufferSourceNodeFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, wrapEventListener: TWrapEventListenerFunction) => TAudioBufferSourceNodeConstructor;
//# sourceMappingURL=audio-buffer-source-node-constructor-factory.d.ts.map