import { TAudioListenerFactory } from 'standardized-audio-context/src/types/audio-listener-factory';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TGetFirstSampleFunction } from 'standardized-audio-context/src/types/get-first-sample-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeChannelMergerNodeFactory } from 'standardized-audio-context/src/types/native-channel-merger-node-factory';
import { TNativeConstantSourceNodeFactory } from 'standardized-audio-context/src/types/native-constant-source-node-factory';
import { TNativeScriptProcessorNodeFactory } from 'standardized-audio-context/src/types/native-script-processor-node-factory';
import { TNotSupportedErrorFactory } from 'standardized-audio-context/src/types/not-supported-error-factory';
import { TOverwriteAccessorsFunction } from 'standardized-audio-context/src/types/overwrite-accessors-function';
export type TAudioListenerFactoryFactory = (createAudioParam: TAudioParamFactory, createNativeChannelMergerNode: TNativeChannelMergerNodeFactory, createNativeConstantSourceNode: TNativeConstantSourceNodeFactory, createNativeScriptProcessorNode: TNativeScriptProcessorNodeFactory, createNotSupportedError: TNotSupportedErrorFactory, getFirstSample: TGetFirstSampleFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, overwriteAccessors: TOverwriteAccessorsFunction) => TAudioListenerFactory;
//# sourceMappingURL=audio-listener-factory-factory.d.ts.map