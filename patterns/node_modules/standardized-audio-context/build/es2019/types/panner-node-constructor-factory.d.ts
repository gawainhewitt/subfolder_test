import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativePannerNodeFactory } from 'standardized-audio-context/src/types/native-panner-node-factory';
import { TPannerNodeConstructor } from 'standardized-audio-context/src/types/panner-node-constructor';
import { TPannerNodeRendererFactory } from 'standardized-audio-context/src/types/panner-node-renderer-factory';
import { TSetAudioNodeTailTimeFunction } from 'standardized-audio-context/src/types/set-audio-node-tail-time-function';
export type TPannerNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createNativePannerNode: TNativePannerNodeFactory, createPannerNodeRenderer: TPannerNodeRendererFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, setAudioNodeTailTime: TSetAudioNodeTailTimeFunction) => TPannerNodeConstructor;
//# sourceMappingURL=panner-node-constructor-factory.d.ts.map