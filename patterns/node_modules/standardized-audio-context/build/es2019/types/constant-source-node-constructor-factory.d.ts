import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TConstantSourceNodeConstructor } from 'standardized-audio-context/src/types/constant-source-node-constructor';
import { TConstantSourceNodeRendererFactory } from 'standardized-audio-context/src/types/constant-source-node-renderer-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeConstantSourceNodeFactory } from 'standardized-audio-context/src/types/native-constant-source-node-factory';
import { TWrapEventListenerFunction } from 'standardized-audio-context/src/types/wrap-event-listener-function';
export type TConstantSourceNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createConstantSourceNodeRenderer: TConstantSourceNodeRendererFactory, createNativeConstantSourceNode: TNativeConstantSourceNodeFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, wrapEventListener: TWrapEventListenerFunction) => TConstantSourceNodeConstructor;
//# sourceMappingURL=constant-source-node-constructor-factory.d.ts.map