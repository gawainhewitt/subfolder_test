import { TAudioNodeConstructor } from 'standardized-audio-context/src/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/src/types/audio-param-factory';
import { TDelayNodeConstructor } from 'standardized-audio-context/src/types/delay-node-constructor';
import { TDelayNodeRendererFactory } from 'standardized-audio-context/src/types/delay-node-renderer-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/src/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TNativeDelayNodeFactory } from 'standardized-audio-context/src/types/native-delay-node-factory';
import { TSetAudioNodeTailTimeFunction } from 'standardized-audio-context/src/types/set-audio-node-tail-time-function';
export type TDelayNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createDelayNodeRenderer: TDelayNodeRendererFactory, createNativeDelayNode: TNativeDelayNodeFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, setAudioNodeTailTime: TSetAudioNodeTailTimeFunction) => TDelayNodeConstructor;
//# sourceMappingURL=delay-node-constructor-factory.d.ts.map