import { TAudioDestinationNodeConstructor } from 'standardized-audio-context/src/types/audio-destination-node-constructor';
import { TAudioListenerFactory } from 'standardized-audio-context/src/types/audio-listener-factory';
import { TEventTargetConstructor } from 'standardized-audio-context/src/types/event-target-constructor';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/is-native-offline-audio-context-function';
import { TMinimalBaseAudioContextConstructor } from 'standardized-audio-context/src/types/minimal-base-audio-context-constructor';
import { TUnrenderedAudioWorkletNodeStore } from 'standardized-audio-context/src/types/unrendered-audio-worklet-node-store';
import { TWrapEventListenerFunction } from 'standardized-audio-context/src/types/wrap-event-listener-function';
export type TMinimalBaseAudioContextConstructorFactory = (audioDestinationNodeConstructor: TAudioDestinationNodeConstructor, createAudioListener: TAudioListenerFactory, eventTargetConstructor: TEventTargetConstructor, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, unrenderedAudioWorkletNodeStore: TUnrenderedAudioWorkletNodeStore, wrapEventListener: TWrapEventListenerFunction) => TMinimalBaseAudioContextConstructor;
//# sourceMappingURL=minimal-base-audio-context-constructor-factory.d.ts.map