import { TAudioBufferStore } from 'standardized-audio-context/src/types/audio-buffer-store';
import { TCacheTestResultFunction } from 'standardized-audio-context/src/types/cache-test-result-function';
import { TGetAudioNodeRendererFunction } from 'standardized-audio-context/src/types/get-audio-node-renderer-function';
import { TGetUnrenderedAudioWorkletNodesFunction } from 'standardized-audio-context/src/types/get-unrendered-audio-worklet-nodes-function';
import { TNativeAudioBuffer } from 'standardized-audio-context/src/types/native-audio-buffer';
import { TRenderNativeOfflineAudioContextFunction } from 'standardized-audio-context/src/types/render-native-offline-audio-context-function';
import { TStartRenderingFunction } from 'standardized-audio-context/src/types/start-rendering-function';
import { TWrapAudioBufferCopyChannelMethodsFunction } from 'standardized-audio-context/src/types/wrap-audio-buffer-copy-channel-methods-function';
import { TWrapAudioBufferCopyChannelMethodsOutOfBoundsFunction } from 'standardized-audio-context/src/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function';
export type TStartRenderingFactory = (audioBufferStore: TAudioBufferStore, cacheTestResult: TCacheTestResultFunction, getAudioNodeRenderer: TGetAudioNodeRendererFunction, getUnrenderedAudioWorkletNodes: TGetUnrenderedAudioWorkletNodesFunction, renderNativeOfflineAudioContext: TRenderNativeOfflineAudioContextFunction, testAudioBufferCopyChannelMethodsOutOfBoundsSupport: (nativeAudioBuffer: TNativeAudioBuffer) => boolean, wrapAudioBufferCopyChannelMethods: TWrapAudioBufferCopyChannelMethodsFunction, wrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFunction) => TStartRenderingFunction;
//# sourceMappingURL=start-rendering-factory.d.ts.map