import { TContext, TDecodeErrorCallback, TDecodeSuccessCallback } from 'standardized-audio-context/src/types';
import { IAnalyserNode } from 'standardized-audio-context/src/interfaces/analyser-node';
import { IAudioBuffer } from 'standardized-audio-context/src/interfaces/audio-buffer';
import { IAudioBufferSourceNode } from 'standardized-audio-context/src/interfaces/audio-buffer-source-node';
import { IAudioNode } from 'standardized-audio-context/src/interfaces/audio-node';
import { IAudioWorklet } from 'standardized-audio-context/src/interfaces/audio-worklet';
import { IBiquadFilterNode } from 'standardized-audio-context/src/interfaces/biquad-filter-node';
import { IConstantSourceNode } from 'standardized-audio-context/src/interfaces/constant-source-node';
import { IConvolverNode } from 'standardized-audio-context/src/interfaces/convolver-node';
import { IDelayNode } from 'standardized-audio-context/src/interfaces/delay-node';
import { IDynamicsCompressorNode } from 'standardized-audio-context/src/interfaces/dynamics-compressor-node';
import { IGainNode } from 'standardized-audio-context/src/interfaces/gain-node';
import { IIIRFilterNode } from 'standardized-audio-context/src/interfaces/iir-filter-node';
import { IMinimalBaseAudioContext } from 'standardized-audio-context/src/interfaces/minimal-base-audio-context';
import { IOscillatorNode } from 'standardized-audio-context/src/interfaces/oscillator-node';
import { IPannerNode } from 'standardized-audio-context/src/interfaces/panner-node';
import { IPeriodicWave } from 'standardized-audio-context/src/interfaces/periodic-wave';
import { IPeriodicWaveConstraints } from 'standardized-audio-context/src/interfaces/periodic-wave-constraints';
import { IStereoPannerNode } from 'standardized-audio-context/src/interfaces/stereo-panner-node';
import { IWaveShaperNode } from 'standardized-audio-context/src/interfaces/wave-shaper-node';
export interface IBaseAudioContext<T extends TContext> extends IMinimalBaseAudioContext<T> {
    readonly audioWorklet?: IAudioWorklet;
    createAnalyser(): IAnalyserNode<T>;
    createBiquadFilter(): IBiquadFilterNode<T>;
    createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer;
    createBufferSource(): IAudioBufferSourceNode<T>;
    createChannelMerger(numberOfInputs?: number): IAudioNode<T>;
    createChannelSplitter(numberOfOutputs?: number): IAudioNode<T>;
    createConstantSource(): IConstantSourceNode<T>;
    createConvolver(): IConvolverNode<T>;
    createDelay(maxDelayTime?: number): IDelayNode<T>;
    createDynamicsCompressor(): IDynamicsCompressorNode<T>;
    createGain(): IGainNode<T>;
    createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIIRFilterNode<T>;
    createOscillator(): IOscillatorNode<T>;
    createPanner(): IPannerNode<T>;
    createPeriodicWave(real: Iterable<number>, imag: Iterable<number>, constraints?: Partial<IPeriodicWaveConstraints>): IPeriodicWave;
    createStereoPanner(): IStereoPannerNode<T>;
    createWaveShaper(): IWaveShaperNode<T>;
    decodeAudioData(audioData: ArrayBuffer, successCallback?: TDecodeSuccessCallback, errorCallback?: TDecodeErrorCallback): Promise<AudioBuffer>;
}
//# sourceMappingURL=base-audio-context.d.ts.map